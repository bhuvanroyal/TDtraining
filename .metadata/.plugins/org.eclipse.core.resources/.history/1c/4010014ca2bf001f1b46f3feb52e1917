package com.order.service.impl;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import com.order.dto.OrderItemDto;
import com.order.dto.OrderRequest;
import com.order.dto.OrderResponse;
import com.order.dto.ProductDto;
import com.order.entity.Order;
import com.order.entity.OrderItem;
import com.order.repository.OrderRepository;
import com.order.service.OrderService;

import lombok.AllArgsConstructor;
import reactor.core.publisher.Mono;
@Service
@AllArgsConstructor
public class OrderServiceImpl implements OrderService {
	
	
	private WebClient webClient;
	
	private OrderRepository orderRepository;

	@Override
	public String placeOrder(OrderRequest orderRequest) {
		Order order=new Order();
		order.setCustomerId(orderRequest.getCustomerId());
		order.setOrderDate(new Date());
		order.setStatus("Placed");
//		List<OrderItemDto> items=
		List<OrderItem> orderItems=orderRequest.getItems().stream().map(item -> {
			ProductDto product=fetchProductDetails(item.getProductId());
			return createOrderItem(product,item.getQuantity());
			
		}
		)
		for(OrderItemDto item:items) {
			ProductDto product=webClient.get().uri("http://localhost:8082/api/product/" +item.getProductId())
			.retrieve().bodyToMono(ProductDto.class).block();
			item.getProductId();
			System.out.println(product);
			OrderItem orderItem=new OrderItem();
			orderItem.setProductId(item.getProductId());
			orderItem.setPrice(product.getPrice());
			orderItem.setQuantity(item.getQuantity());
			orderItem.setTotal(product.getPrice()*item.getQuantity());
			order.getOrderItems().add(orderItem);
		}
		
		orderRepository.save(order);

		return "Success";
	}

	private OrderItem createOrderItem(ProductDto product, Integer quantity) {
		OrderItem orderItem=new OrderItem();
		orderItem.setProductId(product.getProductId());
		orderItem.setPrice(product.getPrice());
		orderItem.setQuantity(quantity);
		orderItem.setTotal(product.getPrice()*quantity);
		return orderItem;
	}

	private ProductDto fetchProductDetails(Long productId) {
		ProductDto product=webClient.get().uri("http://localhost:8082/api/product/" +productId))
				.retrieve().bodyToMono(ProductDto.class).block();
		return product;
	}

	@Override
	public List<OrderResponse> getAllOrders() {
		// TODO Auto-generated method stub
		return null;
	}

}
